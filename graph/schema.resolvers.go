package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"OzonTestTask/OzonTestTask/db"
	"OzonTestTask/OzonTestTask/graph/model"
	"context"
	"fmt"
	"log"
	"strconv"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	id, ok := db.CreatePost(r.db, input)
	if !ok {
		return nil, fmt.Errorf("failed to create post")
	}
	return &model.Post{ID: id, Author: input.Author, CommentsAllowed: input.CommentsAllowed}, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	id, ok := db.CreateComment(r.db, input)
	if !ok {
		return nil, fmt.Errorf("failed to create post")
	}
	return &model.Comment{ID: id, Author: input.Author, ParentPost: input.ParentPost, ParentComment: input.ParentComment}, nil
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (*bool, error) {
	idInt, err := strconv.Atoi(id)
	if err != nil {
		log.Printf("failed to convert id to int")
		ok := false
		return &ok, fmt.Errorf("failed to convert id to int")
	}
	ok := db.DeletePost(r.db, int64(idInt))
	return &ok, nil
}

// DeleteAllPosts is the resolver for the deleteAllPosts field.
func (r *mutationResolver) DeleteAllPosts(ctx context.Context) (*bool, error) {
	ok := db.DeleteAllPosts(r.db)
	if !ok {
		return &ok, fmt.Errorf("failed to delete all posts")
	}
	return &ok, nil
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, id string) (*bool, error) {
	idInt, err := strconv.Atoi(id)
	if err != nil {
		log.Printf("failed to convert id to int")
		ok := false
		return &ok, fmt.Errorf("failed to convert id to int")
	}
	ok := db.DeleteComent(r.db, int64(idInt))
	return &ok, nil
}

// DeleteAllComments is the resolver for the deleteAllComments field.
func (r *mutationResolver) DeleteAllComments(ctx context.Context) (*bool, error) {
	ok := db.DeleteAllComments(r.db)
	if !ok {
		return &ok, fmt.Errorf("failed to delete all posts")
	}
	return &ok, nil
}

// GetAllPosts is the resolver for the GetAllPosts field.
func (r *queryResolver) GetAllPosts(ctx context.Context) ([]*model.Post, error) {
	posts, ok := db.GetAllPosts(r.db)
	if !ok {
		return nil, fmt.Errorf("failed to get all posts")
	}
	return posts, nil
}

// GetPost is the resolver for the GetPost field.
func (r *queryResolver) GetPost(ctx context.Context, id string) (*model.Post, error) {
	idInt, err := strconv.Atoi(id)
	if err != nil {
		log.Printf("failed to convert id to int")
		return nil, fmt.Errorf("failed to convert id to int")
	}
	post, ok := db.GetPost(r.db, int64(idInt))
	if !ok {
		return nil, fmt.Errorf("failed to get post")
	}
	return post, nil
}

// GetCommentsByPost is the resolver for the GetCommentsByPost field.
func (r *queryResolver) GetCommentsByPost(ctx context.Context, parentPost string) ([]*model.Comment, error) {
	id, err := strconv.Atoi(parentPost)
	if err != nil {
		log.Printf("failed to convert id to int")
		return nil, fmt.Errorf("failed to convert id to int")
	}
	comments, ok := db.GetCommentByPost(r.db, int64(id))
	if !ok {
		log.Printf("failed to get comment by post")
		return nil, fmt.Errorf("failed to get comment by post")
	}
	return comments, nil
}

// GetAllComments is the resolver for the GetAllComments field.
func (r *queryResolver) GetAllComments(ctx context.Context) ([]*model.Comment, error) {
	comments, ok := db.GetAllComments(r.db)
	if !ok {
		return nil, fmt.Errorf("failed to get all posts")
	}
	return comments, nil
}

// GetComment is the resolver for the GetComment field.
func (r *queryResolver) GetComment(ctx context.Context, id string) (*model.Comment, error) {
	idInt, err := strconv.Atoi(id)
	if err != nil {
		log.Printf("failed to convert id to int")
		return nil, fmt.Errorf("failed to convert id to int")
	}
	comm, ok := db.GetComment(r.db, int64(idInt))
	if !ok {
		return nil, fmt.Errorf("failed to get post")
	}
	return comm, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
